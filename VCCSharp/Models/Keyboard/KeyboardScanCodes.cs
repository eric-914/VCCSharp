using System.Text;
using VCCSharp.Models.Keyboard.Definitions;

namespace VCCSharp.Models.Keyboard
{
    public interface IKeyboardScanCodes
    {
        string ConvertScanCodes(string text);
    }

    public class KeyboardScanCodes : IKeyboardScanCodes
    {
        public string ConvertScanCodes(string text)
        {
            var result = new StringBuilder();

            foreach (var letter in text)
            {
                char sc = GetScanCode(letter);
                // ReSharper disable once InconsistentNaming
                bool CSHIFT = GetCSHIFT(letter);
                // ReSharper disable once InconsistentNaming
                bool LCNTRL = GetLCNTRL(letter);

                if (CSHIFT) { result.Append((char)DIK.DIK_LSHIFT); }
                if (LCNTRL) { result.Append((char)DIK.DIK_LCONTROL); }

                result.Append(sc);
            }

            return result.ToString();
        }

        public char GetScanCode(char letter)
        {
            return letter switch
            {
                '@' => ScanCodes.D2,
                'A' => ScanCodes.A,
                'B' => ScanCodes.B,
                'C' => ScanCodes.C,
                'D' => ScanCodes.D,
                'E' => ScanCodes.E,
                'F' => ScanCodes.F,
                'G' => ScanCodes.G,
                'H' => ScanCodes.H,
                'I' => ScanCodes.I,
                'J' => ScanCodes.J,
                'K' => ScanCodes.K,
                'L' => ScanCodes.L,
                'M' => ScanCodes.M,
                'N' => ScanCodes.N,
                'O' => ScanCodes.O,
                'P' => ScanCodes.P,
                'Q' => ScanCodes.Q,
                'R' => ScanCodes.R,
                'S' => ScanCodes.S,
                'T' => ScanCodes.T,
                'U' => ScanCodes.U,
                'V' => ScanCodes.V,
                'W' => ScanCodes.W,
                'X' => ScanCodes.X,
                'Y' => ScanCodes.Y,
                'Z' => ScanCodes.Z,
                ' ' => ScanCodes.Space,
                'a' => ScanCodes.A,
                'b' => ScanCodes.B,
                'c' => ScanCodes.C,
                'd' => ScanCodes.D,
                'e' => ScanCodes.E,
                'f' => ScanCodes.F,
                'g' => ScanCodes.G,
                'h' => ScanCodes.H,
                'i' => ScanCodes.I,
                'j' => ScanCodes.J,
                'k' => ScanCodes.K,
                'l' => ScanCodes.L,
                'm' => ScanCodes.M,
                'n' => ScanCodes.N,
                'o' => ScanCodes.O,
                'p' => ScanCodes.P,
                'q' => ScanCodes.Q,
                'r' => ScanCodes.R,
                's' => ScanCodes.S,
                't' => ScanCodes.T,
                'u' => ScanCodes.U,
                'v' => ScanCodes.V,
                'w' => ScanCodes.W,
                'x' => ScanCodes.X,
                'y' => ScanCodes.Y,
                'z' => ScanCodes.Z,
                '0' => ScanCodes.D0,
                '1' => ScanCodes.D1,
                '2' => ScanCodes.D2,
                '3' => ScanCodes.D3,
                '4' => ScanCodes.D4,
                '5' => ScanCodes.D5,
                '6' => ScanCodes.D6,
                '7' => ScanCodes.D7,
                '8' => ScanCodes.D8,
                '9' => ScanCodes.D9,
                '!' => ScanCodes.D1,
                '#' => ScanCodes.D3,
                '$' => ScanCodes.D4,
                '%' => ScanCodes.D5,
                '^' => ScanCodes.D6,
                '&' => ScanCodes.D7,
                '*' => ScanCodes.D8,
                '(' => ScanCodes.D9,
                ')' => ScanCodes.D0,
                '-' => ScanCodes.Minus,
                '_' => ScanCodes.Minus,
                '=' => ScanCodes.Plus,
                '+' => ScanCodes.Plus,
                ';' => ScanCodes.Semicolon,
                ':' => ScanCodes.Semicolon,
                '\'' => ScanCodes.Quotes,
                '\"' => ScanCodes.Quotes,
                '`' => ScanCodes.Tilde,
                '~' => ScanCodes.Tilde,
                '\\' => ScanCodes.Backslash,
                '|' => ScanCodes.Backslash,
                ',' => ScanCodes.Comma,
                '<' => ScanCodes.Comma,
                '.' => ScanCodes.Period,
                '>' => ScanCodes.Period,
                '/' => ScanCodes.Slash,
                '?' => ScanCodes.Slash,
                '[' => ScanCodes.LBracket,
                '{' => ScanCodes.LBracket,
                ']' => ScanCodes.RBracket,
                '}' => ScanCodes.RBracket,
                '\n' => ScanCodes.Return,
                '\t' => ScanCodes.Tab
                ,
                _ => ScanCodes.Undefined
            };
        }

        // ReSharper disable once InconsistentNaming
        public bool GetCSHIFT(char letter)
        {
            return letter switch
            {
                '@' => true,
                'A' => true,
                'B' => true,
                'C' => true,
                'D' => true,
                'E' => true,
                'F' => true,
                'G' => true,
                'H' => true,
                'I' => true,
                'J' => true,
                'K' => true,
                'L' => true,
                'M' => true,
                'N' => true,
                'O' => true,
                'P' => true,
                'Q' => true,
                'R' => true,
                'S' => true,
                'T' => true,
                'U' => true,
                'V' => true,
                'W' => true,
                'X' => true,
                'Y' => true,
                'Z' => true,
                ' ' => false,
                'a' => false,
                'b' => false,
                'c' => false,
                'd' => false,
                'e' => false,
                'f' => false,
                'g' => false,
                'h' => false,
                'i' => false,
                'j' => false,
                'k' => false,
                'l' => false,
                'm' => false,
                'n' => false,
                'o' => false,
                'p' => false,
                'q' => false,
                'r' => false,
                's' => false,
                't' => false,
                'u' => false,
                'v' => false,
                'w' => false,
                'x' => false,
                'y' => false,
                'z' => false,
                '0' => false,
                '1' => false,
                '2' => false,
                '3' => false,
                '4' => false,
                '5' => false,
                '6' => false,
                '7' => false,
                '8' => false,
                '9' => false,
                '!' => true,
                '#' => true,
                '$' => true,
                '%' => true,
                '^' => true,
                '&' => true,
                '*' => true,
                '(' => true,
                ')' => true,
                '-' => false,
                '=' => false,
                ';' => false,
                '\'' => false,
                '/' => false,
                '.' => false,
                ',' => false,
                '\n' => false,
                '+' => true,
                ':' => true,
                '\"' => true,
                '?' => true,
                '<' => true,
                '>' => true,
                '[' => false,
                ']' => false,
                '{' => true,
                '}' => true,
                '\\' => false,
                '|' => true,
                '`' => false,
                '~' => true,
                '_' => true,
                '\t' => false, // TAB

                _ => false
            };
        }

        // ReSharper disable once InconsistentNaming
        /// <summary>
        /// 
        /// </summary>
        /// <returns>TRUE when { [, ], \ }</returns>
        public bool GetLCNTRL(char letter)
        {
            return letter switch
            {
                '@' => false,
                'A' => false,
                'B' => false,
                'C' => false,
                'D' => false,
                'E' => false,
                'F' => false,
                'G' => false,
                'H' => false,
                'I' => false,
                'J' => false,
                'K' => false,
                'L' => false,
                'M' => false,
                'N' => false,
                'O' => false,
                'P' => false,
                'Q' => false,
                'R' => false,
                'S' => false,
                'T' => false,
                'U' => false,
                'V' => false,
                'W' => false,
                'X' => false,
                'Y' => false,
                'Z' => false,
                ' ' => false,
                'a' => false,
                'b' => false,
                'c' => false,
                'd' => false,
                'e' => false,
                'f' => false,
                'g' => false,
                'h' => false,
                'i' => false,
                'j' => false,
                'k' => false,
                'l' => false,
                'm' => false,
                'n' => false,
                'o' => false,
                'p' => false,
                'q' => false,
                'r' => false,
                's' => false,
                't' => false,
                'u' => false,
                'v' => false,
                'w' => false,
                'x' => false,
                'y' => false,
                'z' => false,
                '0' => false,
                '1' => false,
                '2' => false,
                '3' => false,
                '4' => false,
                '5' => false,
                '6' => false,
                '7' => false,
                '8' => false,
                '9' => false,
                '!' => false,
                '#' => false,
                '$' => false,
                '%' => false,
                '^' => false,
                '&' => false,
                '*' => false,
                '(' => false,
                ')' => false,
                '-' => false,
                '=' => false,
                ';' => false,
                '\'' => false,
                '/' => false,
                '.' => false,
                ',' => false,
                '\n' => false,
                '+' => false,
                ':' => false,
                '\"' => false,
                '?' => false,
                '<' => false,
                '>' => false,
                '[' => true,
                ']' => true,
                '{' => false,
                '}' => false,
                '\\' => true,
                '|' => false,
                '`' => false,
                '~' => false,
                '_' => false,
                '\t' => false, // TAB

                _ => false
            };
        }
    }
}
